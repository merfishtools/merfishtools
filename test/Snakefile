configfile: "config.yaml"


merfishtools = "../target/release/merfishtools"


contexts = ["paper"]


rule all:
    input:
        "diffexp/140genesData.A-vs-B.txt",
        expand("results/{context}/foldchange_cdf/140genesData.A-vs-B.{gene}.pdf", gene=config["genes"], context=contexts),
        expand("results/{context}/expression_pmf/140genesData.{gene}.X.pdf", gene=config["genes"], context=contexts),
        expand([
            "results/{context}/140genesData.pca.pdf",
            "results/{context}/140genesData.all.expression_dist.pdf",
            "results/{context}/140genesData.all.overdispersion.pdf",
            "results/{context}/140genesData.all.correlation.pdf"
        ], context=contexts),
        expand("results/{context}/140genesData.expmnt{expmnt}.expression_dist.pdf", context=contexts, expmnt=[1, 2])



rule plots:
    input:
        expand("results/expression_pmf/140genesData/{gene}.svg", gene="AFAP1 COL5A1".split())


rule sort:
    input:
        "data/140genesData.csv.bz2"
    output:
        "data/140genesData.sorted.txt"
    shell:
        r"bzcat {input} | xsv sort -d '\t' | xsv fmt -t '\t' > {output}"


rule expressions:
    input:
        "data/{dataset}.sorted.txt"
    output:
        pmf="expressions/{dataset}.{group}.txt",
        est="expressions/{dataset}.{group}.est.txt",
    params:
        expmnts=lambda wildcards: config["groups"][wildcards.group]["expmnts"],
        cells=lambda wildcards: config["groups"][wildcards.group]["cells"]
    threads: 8
    shell:
        "{merfishtools} exp --estimate {output.est} -t {threads} "
        "--expmnts '{params.expmnts}' --cells '{params.cells}' < {input} "
        "> {output.pmf}"


rule diffexp:
    input:
        "expressions/{dataset}.{group1}.txt",
        "expressions/{dataset}.{group2}.txt"
    output:
        pmf="diffexp/{dataset}.{group1}-vs-{group2}.txt",
        est="diffexp/{dataset}.{group1}-vs-{group2}.est.txt"
    benchmark:
        "bench/diffexp/{dataset}.{group1}-vs-{group2}.txt"
    threads: 8
    shell:
        "{merfishtools} diffexp -t {threads} --pmf {output.pmf} {input} "
        "> {output.est}"


rule plot_expression_pmf:
    input:
        expr="expressions/{dataset}.{group}.txt",
        raw="data/{dataset}.sorted.txt"
    output:
        "results/{context}/expression_pmf/{dataset}.{gene}.{group}.svg"
    script:
        "scripts/plot-expression-pmf.py"


rule plot_foldchange_cdf:
    input:
        pmf="diffexp/{dataset}.{group1}-vs-{group2}.txt",
        est="diffexp/{dataset}.{group1}-vs-{group2}.est.txt"
    output:
        "results/{context}/foldchange_cdf/{dataset}.{group1}-vs-{group2}.{gene}.svg"
    script:
        "scripts/plot-foldchange-cdf.py"


rule expression_matrix:
    input:
        "expressions/{dataset}.{group}.est.txt"
    output:
        "expressions/{dataset}.{group}.matrix.txt"
    script:
        "scripts/expression-matrix.py"


rule plot_expression_dist:
    input:
        "expressions/{dataset}.{group}.matrix.txt"
    output:
        "results/{context}/{dataset}.{group}.expression_dist.svg"
    script:
        "scripts/plot-expression-dist.py"


rule plot_overdispersion:
    input:
        "expressions/{dataset}.{group}.matrix.txt"
    output:
        "results/{context}/{dataset}.{group}.overdispersion.svg"
    script:
        "scripts/plot-overdispersion.py"


rule plot_correlation:
    input:
        "expressions/{dataset}.{group}.matrix.txt"
    output:
        "results/{context}/{dataset}.{group}.correlation.svg"
    script:
        "scripts/plot-correlation.py"


rule plot_pca:
    input:
        "expressions/{dataset}.all.matrix.txt"
    output:
        "results/{context}/{dataset}.pca.svg"
    script:
        "scripts/plot-pca.py"


rule svg2pdf:
    input:
        "{prefix}.svg"
    output:
        "{prefix}.pdf"
    shell:
        "rsvg-convert -f pdf {input} > {output}"
