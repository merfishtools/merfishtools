configfile: "config.yaml"


merfishtools = "../target/release/merfishtools"


contexts = ["paper"]


rule all:
    input:
        expand([
            "results/{context}/foldchange_cdf/140genesData.1.A-vs-B.{gene}.{settings}.foldchange_cdf.pdf",
            "results/{context}/expression_pmf/140genesData.1.cell0.{gene}.{settings}.expression_pmf.pdf"
        ], gene=config["genes"], context=contexts, settings=config["settings"]),
        expand([
            "results/{context}/140genesData.{settings}.pca.pdf",
            "results/{context}/140genesData.{settings}.expression_dist.pdf",
            "results/{context}/140genesData.{settings}.overdispersion.pdf",
            "results/{context}/140genesData.{settings}.correlation.pdf"
        ], context=contexts, settings=config["settings"]),
        expand("results/{context}/simulation/squared_error.nodrop.svg", context=contexts)


rule format:
    input:
        "data/{dataset}.csv.bz2"
    output:
        "data/{dataset}.{experiment}.{group}.txt"
    script:
        "scripts/format-dataset.py"



rule raw_counts:
    input:
        "data/{dataset}.{experiment}.{group}.txt"
    output:
        "counts/{dataset}.{experiment}.{group}.txt"
    script:
        "scripts/raw-counts.py"


rule expressions:
    input:
        "data/{dataset}.txt"
    output:
        pmf="expressions/{dataset}.{settings}.txt",
        est="expressions/{dataset}.{settings}.est.txt",
    params:
        dropout_rate=lambda wildcards: config["settings"][wildcards.settings]["dropout_rate"]
    benchmark:
        "bench/exp/{dataset}.{settings}.txt"
    threads: 8
    shell:
        "{merfishtools} exp --dropout-rate {params.dropout_rate} "
        "--estimate {output.est} -t {threads} < {input} > {output.pmf}"


rule diffexp:
    input:
        "expressions/{dataset}.{experiment}.{group1}.{settings}.txt",
        "expressions/{dataset}.{experiment}.{group2}.{settings}.txt"
    output:
        pmf="diffexp/{dataset}.{experiment}.{group1}-vs-{group2}.{settings}.txt",
        est="diffexp/{dataset}.{experiment}.{group1}-vs-{group2}.{settings}.est.txt"
    benchmark:
        "bench/diffexp/{dataset}.{experiment}.{group1}-vs-{group2}.{settings}.txt"
    threads: 8
    shell:
        "{merfishtools} diffexp -t {threads} --pmf {output.pmf} {input} "
        "> {output.est}"


rule plot_expression_pmf:
    input:
        expr="expressions/{dataset}.{experiment}.{group}.{settings}.txt",
        raw_counts="counts/{dataset}.{experiment}.{group}.txt"
    output:
        "results/{context}/expression_pmf/{dataset}.{experiment}.{group}.{gene}.{settings}.expression_pmf.svg"
    script:
        "scripts/plot-expression-pmf.py"


rule plot_foldchange_cdf:
    input:
        pmf="diffexp/{dataset}.{experiment}.{group1}-vs-{group2}.{settings}.txt",
        est="diffexp/{dataset}.{experiment}.{group1}-vs-{group2}.{settings}.est.txt"
    output:
        "results/{context}/foldchange_cdf/{dataset}.{experiment}.{group1}-vs-{group2}.{gene}.{settings}.foldchange_cdf.svg"
    script:
        "scripts/plot-foldchange-cdf.py"


rule expression_matrix:
    input:
        "expressions/{dataset}.{experiment}.{group}.{settings}.est.txt"
    output:
        "expressions/{dataset}.{experiment}.{group}.{settings}.matrix.txt"
    script:
        "scripts/expression-matrix.py"


matrices = expand("expressions/{{dataset}}.{experiment}.all.{{settings}}.matrix.txt", experiment=range(1, config["experiment_count"] + 1))


rule plot_expression_dist:
    input:
        matrices
    output:
        "results/{context}/{dataset}.{settings}.expression_dist.svg"
    script:
        "scripts/plot-expression-dist.py"


rule plot_overdispersion:
    input:
        matrices
    output:
        "results/{context}/{dataset}.{settings}.overdispersion.svg"
    script:
        "scripts/plot-overdispersion.py"


rule plot_correlation:
    input:
        matrices
    output:
        "results/{context}/{dataset}.{settings}.correlation.svg"
    script:
        "scripts/plot-correlation.py"


rule plot_pca:
    input:
        matrices
    output:
        "results/{context}/{dataset}.{settings}.pca.svg"
    script:
        "scripts/plot-pca.py"


rule plot_codebook:
    input:
        "data/{codebook}.codebook.txt"
    output:
        "results/{context}/codebook/{codebook}.neighbors.svg"
    params:
        neighbor_dist=4
    script:
        "scripts/plot-codebook-neighbors.py"


rule simulate:
    input:
        lambda wildcards: "data/140genes.1.codebook.txt" if dist == "4" else "data/1001genes.1.codebook.txt"
    output:
        sim_counts="data/simulated-MHD{dist,(2|4)}.{mean}.all.txt",
        known_counts="data/simulated-MHD{dist}.{mean}.known.txt"
    params:
        cell_count=10
    script:
        "scripts/simulate-counts.py"


means = list(range(5, 40, 5))


rule plot_simulation:
    input:
        posterior_counts=expand("expressions/simulated.{mean}.all.{{settings}}.est.txt", mean=means),
        raw_counts=expand("counts/simulated.{mean}.all.txt", mean=means),
        known_counts=expand("data/simulated.{mean}.known.txt", mean=means)
    output:
        "results/{context}/simulation/squared_error.{settings}.svg"
    params:
        means=means
    script:
        "scripts/plot-simulation.py"


rule svg2pdf:
    input:
        "{prefix}.svg"
    output:
        "{prefix}.pdf"
    shell:
        "rsvg-convert -f pdf {input} > {output}"
