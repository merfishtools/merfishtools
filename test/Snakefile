import pandas as pd
import matplotlib
matplotlib.use("agg")
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np


configfile: "config.yaml"


merfishtools = "../target/release/merfishtools"


plot_ext = ["svg", "pdf"]


rule all:
    input:
        "diffexp/140genesData.A-vs-B.txt",
        expand("results/foldchange_pmf/140genesData.A-vs-B.{gene}.{ext}", ext=plot_ext, gene=config["genes"]),
        expand("results/expression_pmf/140genesData.{gene}.{ext}", ext=plot_ext, gene=config["genes"]),
        expand("results/{name}.expr_graph.{ext}", ext=plot_ext, name=["all", "pruned"])


rule plots:
    input:
        expand("results/expression_pmf/140genesData/{gene}.svg", gene="AFAP1 COL5A1".split())


rule sort:
    input:
        "data/140genesData.csv.bz2"
    output:
        "data/140genesData.sorted.txt"
    shell:
        r"bzcat {input} | xsv sort -d '\t' | xsv fmt -t '\t' > {output}"


rule expressions:
    input:
        "data/{dataset}.sorted.txt"
    output:
        pmf="expressions/{dataset}.all.txt",
        est="expressions/{dataset}.all.est.txt",
    threads: 8
    shell:
        "{merfishtools} exp --estimate {output.est} -t {threads} < {input} "
        "> {output.pmf}"


rule select_group:
    input:
        "expressions/{dataset}.all.txt"
    output:
        "expressions/{dataset}.{group}.txt"
    params:
        expmnt=lambda wildcards: str(config["groups"][wildcards.group]["expmnt"]),
        cells=lambda wildcards: config["groups"][wildcards.group]["cells"]
    shell:
        r"xsv search -d'\t' -s expmnt '{params.expmnt}' < {input} | "
        r"xsv search -s cell '{params.cells}' | xsv fmt -t '\t' > {output}"


rule diffexp:
    input:
        "expressions/{dataset}.{group1}.txt",
        "expressions/{dataset}.{group2}.txt"
    output:
        pmf="diffexp/{dataset}.{group1}-vs-{group2}.txt",
        est="diffexp/{dataset}.{group1}-vs-{group2}.est.txt"
    benchmark:
        "bench/diffexp/{dataset}.{group1}-vs-{group2}.txt"
    threads: 8
    shell:
        "{merfishtools} diffexp -t {threads} --pmf {output.pmf} {input} "
        "> {output.est}"


def plot_pmf(values, probs):
    _, _, baseline = plt.stem(values, probs, markerfmt="ko", basefmt="", linefmt="k-")
    plt.setp(baseline, 'linewidth', 0)


def plot_cdf(values, probs):
    plt.step(values, np.cumsum(probs), "k-")


rule plot_expression_pmf:
    input:
        expr="expressions/{dataset}.all.txt",
        raw="data/{dataset}.sorted.txt"
    output:
        "results/expression_pmf/{dataset}.{gene}.svg"
    run:
        plt.figure()
        sns.set_style("ticks")
        raw = pd.read_table(input.raw, index_col=[0, 2, 3])
        raw = raw.loc[1, 0, wildcards.gene]

        count_exact = raw["Exact_Match"].sum()
        count_corrected = raw["Corrected_Match"].sum()
        count_total = count_exact + count_corrected

        pmf = pd.read_table(input.expr, index_col=[0, 1, 2])
        pmf = pmf.loc[1, 0, wildcards.gene]

        plot_pmf(pmf["expr"], np.exp(pmf["prob"]))
        ylim = plt.ylim()
        plt.vlines([count_exact], *ylim, colors="grey", linestyles="--")
        plt.vlines([count_total], *ylim, colors="grey", linestyles="--")
        plt.text(count_exact, ylim[1], "exact calls", rotation="vertical", va="top")
        plt.text(count_total, ylim[1], "total calls", rotation="vertical", va="top")
        plt.ylim(ylim)
        plt.xlabel("expression")
        plt.ylabel("posterior probability")

        sns.despine()
        plt.savefig(output[0], bbox_inches="tight")


rule plot_foldchange_pmf:
    input:
        "diffexp/{dataset}.{group1}-vs-{group2}.txt"
    output:
        "results/foldchange_pmf/{dataset}.{group1}-vs-{group2}.{gene}.svg"
    run:
        plt.figure()
        sns.set_style("ticks")
        pmf = pd.read_table(input[0], index_col=0)
        pmf = pmf.loc[wildcards.gene]
        pmf.sort("log2fc", inplace=True)

        plot_cdf(pmf["log2fc"], np.exp(pmf["prob"]))
        plt.xlabel("log2 fold change")
        plt.ylabel("posterior probability")

        sns.despine()
        plt.savefig(output[0], bbox_inches="tight")


rule render_expr_graph:
    input:
        "dot/{name}.dot"
    output:
        "results/{name}.expr_graph.svg"
    shell:
        "dot -Tsvg {input} > {output}"


rule svg2pdf:
    input:
        "{prefix}.svg"
    output:
        "{prefix}.pdf"
    shell:
        "rsvg-convert -f pdf {input} > {output}"
